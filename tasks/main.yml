---
# tasks file for ansible-eks

- name: Installing Collection
  command: "ansible-galaxy collection install amazon.aws"

- name: Install boto python package
  pip:
    name:
       - "{{ pkg1 }}"
       - "{{ pkg2 }}"
       - "{{ pkg3 }}"
 
- name: Configuring aws credentials
  blockinfile:
    path: /root/.aws/credentials
    block: |
      [default]
      aws_access_key_id = "{{ access_key }}"
      aws_secret_access_key = "{{ secret_key }}"

- name: Configuring aws config
  blockinfile:
    path: /root/.aws/config
    block: |
      [default]
      region = "{{ region_name }}"
      output = "{{ op }}"

- name: creating VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ cidr1 }}"
    tags:
      Environment: "{{ env }}"
      region: "{{ region_name }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"

  register: vpc


- name: Creating subnet1
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ cidr2 }}"
    az: "{{ az1 }}"
    map_public: yes
    tags:
      Name: "{{ sub1 }}"
  register: subnet1

- name: Creating subnet2
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ cidr3 }}"
    az: "{{ az2 }}"
    map_public: yes
    tags:
      Name: "{{ sub2 }}"
  register: subnet2

- name: Creating internet gateway
  ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    state: present
    tags:
      Name: "{{ ig }}"
  register: igw

- name: Set up public subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region_name }}"
    tags:
      Name: "{{ rt }}"
    subnets:
      - "{{ subnet1.subnet.id }}"
      - "{{ subnet2.subnet.id }}"
    routes:
      - dest: "{{ cidr4 }}"
        gateway_id: "{{ igw.gateway_id }}"
  register: public_route_table

- name: creating security group
  ec2_group:
    name: "{{ sg }}"
    description: "{{ sg_des }}"
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region_name }}"
    rules:
      - proto: "{{ proto1 }}"
        from_port: "{{ port1 }}"
        to_port: "{{ port1 }}"
        cidr_ip: "{{ cidr4 }}"
      - proto: "{{ proto1 }}"
        from_port: "{{ port2 }}"
        to_port: "{{ port2 }}"
        cidr_ip: "{{ cidr4 }}"
      - proto: "{{ proto1 }}"
        from_port: "{{ port3 }}"
        to_port: "{{ port3 }}"
        cidr_ip: "{{ cidr4 }}"
      - proto: "{{ proto2 }}"
        from_port: "{{ port4 }}"
        to_port: "{{ port4 }}"
        cidr_ip: "{{ cidr4 }}"
  register: sg

- name: "Create a role and attach a managed policy called 'eks cluster'"
  iam_role:
     name: "{{ role1 }}"
     assume_role_policy_document: "{{ lookup('file','policy1.json') }}"
     managed_policy:
     - "{{ policy1 }}"
  register: role1
 
- name: "Create a role and attach a managed policy called 'ec2,eks_worker_node,& container registry'"
  iam_role:
    name: "{{ role2 }}"
    assume_role_policy_document: "{{ lookup('file','policy2.json') }}"
    managed_policy:
    - "{{ policy2 }}"
    - "{{ policy3 }}"
    - "{{ policy4 }}"
    - "{{ policy5 }}"
  register: role2

- name: Create an EKS cluster
  aws_eks_cluster:
    name: "{{ cluster_name }}"
    version: "{{ k8s_version }}"
    region: "{{ region_name }}"
    subnets:
    - "{{ subnet1.subnet.id }}"
    - "{{ subnet2.subnet.id }}"
    security_groups: "{{ sg.group_id }}"
    role_arn: "{{ role1.arn }}"
    state: present

- name: Pause for 15 minutes to build MasterNode
  pause:
    minutes: 15

- name: Configuring Worker Nodes
  command: "aws eks create-nodegroup --cluster-name {{ cluster_name }} --nodegroup-name {{ node_grp }} --disk-size {{ size }} --subnets {{ subnet1.subnet.id }} {{ subnet2.subnet.id }} --scaling-config minSize=1,maxSize=3,desiredSize=3 --instance-types {{ instance }}  --ami-type {{ ami }} --node-role {{ role2.arn }}  --tags KeyName1=Worker_Nodes,KeyName2=EKS"

- name: Pause for 2 minutes to build WorkerNodes
  pause:
    minutes: 2

- name: Configuring Yum repo for k8s
  yum_repository:
    name: "{{ repo_name }}"
    description: "{{ repo_desc }}"
    baseurl: "{{ b_url }}"
    enabled: yes
    gpgcheck: yes
    repo_gpgcheck: yes
    gpgkey: "{{ g_key }}"

- name: installation of kubectl
  package:
    name: "kubectl"
    state: present

- name: Getting Cluster Details
  command: "aws eks --region {{ region_name }} update-kubeconfig --name {{ cluster_name }}"

- name: storing secret file
  command: "kubectl apply -f /root/Ansible-Project/ansible-eks/files/secret.yml"

- name: creating storage class
  command: "kubectl apply -f /root/Ansible-Project/ansible-eks/files/sc.yml"

- name: creating wordpress deployment
  command: "kubectl create -f /root/Ansible-Project/ansible-eks/files/wordpress.yml"

- name: creating mysql deployment
  command: "kubectl create -f /root/Ansible-Project/ansible-eks/files/mysql.yml"
  ...
